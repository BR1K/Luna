{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/game.js","webpack:///./lib/main.js","webpack:///./lib/sky.js","webpack:///./lib/spaceship.js","webpack:///./lib/terrain2.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;;AAIA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AClFA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;AC3BD;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,mBAAmB;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;AC/DA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY;AACZ,YAAY;AACZ,YAAY;AACZ,YAAY;AACZ,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;;AAEvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;;AAGA;;;;;;;;;;;;;ACrOA;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sFAAsF,iDAAiD;AACvI;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC,sCAAsC,WAAW;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oBAAoB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB,WAAW;AAC9B,mCAAmC,WAAW;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA,eAAe,0BAA0B;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wFAAwF,iDAAiD;AACzI;AACA;AACA;AACA;AACA;;AAEA","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/main.js\");\n","import Spaceship from './spaceship'\n// import Terrain from './terrain';\nimport Terrain from './terrain2';\nimport Sky from './sky';\n\nclass Game {\n\n  constructor(ctx, canvas, ctx2, canvas2, ctx3, canvas3) {\n\n    this.ctx = ctx;\n    this.terrain = new Terrain(ctx3, canvas3);\n    this.spaceship = new Spaceship(ctx, canvas, this.terrain);\n    this.sky = new Sky(ctx2, canvas2);\n    this.ctx2 = ctx2;\n    this.canvas2 = canvas2;\n    this.canvas = canvas;\n    this.ctx3 = ctx3;\n    this.canvas3 = canvas3;\n    this.draw3 = this.draw3.bind(this);\n    this.draw1 = this.draw1.bind(this);\n    this.draw2 = this.draw2.bind(this);\n  }\n\n  // drawTerrain() {\n  //   this.terrain.drawTerrain();\n  // }\n\n  draw1() {\n    // console.log(this);\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.ctx.save();\n    this.spaceship.drawSpaceship();\n    this.spaceship.updateSpaceship();\n\n\n    requestAnimationFrame(this.draw1);\n\n\n  }\n\n  draw2() {\n\n    // console.log(this);\n    this.ctx2.clearRect(0, 0, this.canvas2.width, this.canvas2.height);\n    this.ctx2.save();\n    this.sky.drawSky();\n\n    requestAnimationFrame(this.draw2);\n\n\n  }\n\n\n  draw3() {\n    this.ctx3.clearRect(0, 0, this.ctx3.width, this.ctx3.height);\n    this.terrain.drawTerrain();\n    // this.terrain.drawFloor();\n\n    requestAnimationFrame(this.draw3);\n  }\n\n}\n\n// Game.draw();\n\n\n\nexport default Game;\n\n\n\n// function draw() {\n//   ctx.clearRect(0, 0, canvas.width, canvas.height);\n//\n//   updateSpaceship();\n//\n//   drawSpaceship();\n//\n//   requestAnimationFrame(draw);\n// }\n//\n//\n// draw();\n","import Game from './game.js';\n// import Spaceship from './spaceship';\nimport Terrain from './terrain2';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\n  // console.log(\"hi\");\n  const canvas = document.getElementById(\"game\");\n  const ctx = canvas.getContext('2d');\n\n  const canvas2 = document.getElementById(\"background\");\n  const ctx2 = canvas2.getContext('2d');\n\n  const canvas3 = document.getElementById(\"background2\");\n  const ctx3 = canvas3.getContext('2d');\n\n  const terrain = new Terrain(ctx3, canvas3);\n\n  const game = new Game(ctx, canvas, ctx2, canvas2, ctx3, canvas3);\n\n  document.addEventListener('keydown', e => game.spaceship.keyPressed(e));\n  document.addEventListener('keyup', e => game.spaceship.keyUnPressed(e));\n  // game.drawTerrain();\n  terrain.drawTerrain();\n  game.draw3();\n  game.draw1();\n  game.draw2();\n});\n","class Sky {\n  constructor(ctx, canvas) {\n    this.ctx = ctx;\n    this.color = \"#000\";\n    // this.color = \"rgba(0, 0, 0, 0)\"\n    this.canvas = canvas;\n    this.stars = [];\n    this.numStars = 500;\n    this.speed = 25;\n\n    this.drawStar = this.drawStar.bind(this);\n    this.drawSky = this.drawSky.bind(this);\n    this.makeStar = this.makeStar.bind(this);\n\n    for(let i = 0; i < this.numStars; i++) {\n      this.stars[i] = this.makeStar();\n    }\n  }\n\n  makeStar() {\n    return {\n      x: Math.random() * 1,\n      y: Math.random() * 1,\n      distance: Math.sqrt(Math.random() / 7),\n      color: 'hsl('+Math.random()*40+',100%,'+(70+Math.random()*30)+'%)'\n    };\n  }\n\n  drawStars() {\n    for (let i = 0; i < this.numStars; i++) {\n      let star = this.stars[i];\n      this.stars[i].x -= Math.pow(this.stars[i].distance, 2) / this.canvas.width * this.speed;\n      if (this.stars[i].x <= 0) {\n        this.stars[i] = this.makeStar();\n        this.stars[i].x = 1;\n      }\n\n      this.drawStar(this.stars[i]);\n    }\n  }\n\n  drawStar(star) {\n\n    let x = star.x * this.canvas.width;\n    let y = star.y * this.canvas.height;\n    let z = star.distance * 2;\n    this.ctx.beginPath();\n    this.ctx.arc(x, y, z, 0, 2 * Math.PI, false);\n    this.ctx.lineWidth = star.distance * 4;\n    this.ctx.strokeStyle='rgba(255,255,255,0.2)';\n    this.ctx.stroke();\n    this.ctx.fillStyle = star.color;\n    this.ctx.fill();\n  }\n\n  drawSky() {\n    this.ctx.fillStyle = this.color;\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    this.drawStars();\n  }\n\n}\nexport default Sky;\n","import Game from './game';\n\nclass Spaceship {\n  constructor(ctx, canvas, terrain) {\n\n    this.terrain = terrain;\n    this.friction = 0.5\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.angle = 45;\n    this.color = \"lightgrey\";\n    this.width = 16; //8\n    this.thrust = 0.07;\n    this.height = 40; // 22\n    this.gravity = .03\n    this.velocity = {\n      x: 0,\n      y: 0\n    }\n    this.position = {\n      x: 200,\n      y: 0\n    },\n    this.points = {\n      nw: {},\n      ne: {},\n      sw: {},\n      se: {},\n    },\n    this.thrusterOn = false;\n    this.acceleration = 0;\n    this.deceleration = 0;\n    this.rotatingClockwise = false;\n    this.rotatingCounterClockwise = false;\n\n    this.fuel = 500000;\n    this.landed = false;\n    this.crashed = false;\n\n    this.getTopMid = this.getTopMid.bind(this);\n    this.getBotMid = this.getBotMid.bind(this);\n    this.getCorners = this.getCorners.bind(this);\n    this.getLowestPoint = this.getLowestPoint.bind(this);\n    this.checkCollision = this.checkCollision.bind(this);\n  }\n\n  drawSpaceship() {\n\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.translate(this.position.x, this.position.y);\n    this.ctx.rotate(this.angle);\n    this.ctx.rect(this.width * -0.5, this.height * -0.5, this.width, this.height);\n    this.ctx.fillStyle = this.color;\n    this.ctx.fill();\n    this.ctx.closePath();\n\n    if (this.thrusterOn) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(this.width * -0.5, this.height * 0.5);\n      this.ctx.lineTo(this.width * 0.5, this.height * 0.5);\n      this.ctx.lineTo(0, this.height * 0.5 + Math.random() * 20);\n      this.ctx.lineTo(this.width * -0.5, this.height * 0.5);\n      this.ctx.closePath();\n      this.ctx.fillStyle = \"orange\";\n      this.ctx.fill();\n    }\n\n    this.ctx.restore();\n  }\n\n  // arr[x] == ship.pos.y\n\n  checkCollision() {\n    debugger\n    let width = this.canvas.width;\n    let height = this.canvas.height;\n    let displace = height / 6;\n    let detail = 0.6;\n    let seed = {\n      s: height / 2 + (Math.random() * displace * 2) - displace,\n      e: height / 2 + (Math.random() * displace * 2) - displace\n    }\n    // debugger\n    let points = this.terrain.terrain;\n    if (this.terrain.terrain2.length - 1 + this.terrain.width + this.terrain.offset <= this.terrain.width) {\n      points = this.terrain.terrain2;\n    }\n    // debugger\n    let lowestPoint = this.getLowestPoint();\n    let i = Math.floor(lowestPoint.x);\n    if (lowestPoint.y >= points[i]) {\n      console.log(\"omg\");\n    }\n  }\n\n\n  updateSpaceship() {\n    // if (this.position.y = 500) {\n    //   this.velocity.y = 0;\n    //   this.gravity = 0\n    //   debugger\n    // }\n    // debugger\n    this.getCorners();\n    this.checkCollision();\n\n    this.position.x += this.velocity.x;\n    this.position.y -= this.velocity.y;\n    //gravity + acceleration:\n    this.velocity.y -= (this.gravity + .03);\n\n    if (this.fuel === 0) {\n      this.thrusterOn = false;\n    }\n\n    if (this.position.y + (this.height / 2) > this.canvas.height) {\n      this.velocity.y = -this.velocity.y * this.friction;\n    }\n\n    if (this.thrusterOn) {\n      if (this.thrust < .18) { // terminal velocity\n        this.thrust += 0.003\n      }\n      this.velocity.x += this.thrust * (Math.sin(this.angle));\n      this.velocity.y += this.thrust * (Math.cos(this.angle));\n      this.fuel -= 0.5;\n\n\n    }\n    if (this.rotatingClockwise) {\n      this.angle += ( Math.PI / 180);\n    } else if (this.rotatingCounterClockwise) {\n      this.angle -= (Math.PI / 180);\n    }\n\n  }\n\n  keyPressed(event) {\n\n    switch (event.keyCode) {\n      case 37:\n        this.rotatingCounterClockwise = true;\n        break;\n      case 39:\n\n        this.rotatingClockwise = true;\n\n        break;\n      case 38:\n        this.thrusterOn = true;\n        break;\n    }\n  }\n\n\n  keyUnPressed(event) {\n    switch (event.keyCode) {\n      case 37:\n        this.rotatingCounterClockwise = false;\n        break;\n      case 39:\n        this.rotatingClockwise = false;\n        break;\n      case 38:\n        this.thrust = 0;\n        this.thrusterOn = false;\n        break;\n    }\n  }\n\n  //calculating ship's 4 points:\n  //////////////////////////////////////////////////////////////////////////////\n  getTopMid(cos, sin) {\n    return {\n      x : this.position.x + sin * this.height / 2,\n      y : this.position.y - cos * this.height / 2\n    }\n  }\n\n  getBotMid(cos, sin) {\n    return {\n      x : this.position.x - sin * this.height / 2,\n      y : this.position.y + cos * this.height / 2\n    }\n  }\n\n  getCorners() {\n    const sin = Math.sin(this.angle);\n    const cos = Math.cos(this.angle);\n    const topMid = this.getTopMid(cos, sin);\n    const botMid = this.getBotMid(cos, sin);\n\n    this.points.nw = {\n      x: topMid.x - (cos * this.width / 2),\n      y: topMid.y - (sin * this.width / 2)\n    }\n    this.points.ne = {\n      x: topMid.x + (cos * this.width / 2),\n      y: topMid.y + (sin * this.width / 2)\n    }\n    this.points.sw = {\n      x: botMid.x - (cos * this.width / 2),\n      y: botMid.y - (sin * this.width / 2)\n    }\n    this.points.se = {\n      x: botMid.x + (cos * this.width / 2),\n      y: botMid.y + (sin * this.width / 2)\n    }\n  }\n  // //////////////////////////////////////////////////////////////////////////////\n  getLowestPoint() {\n    // debugger\n    let lowestPoint = { x: 0, y: 0 };\n\n    for (let corner in this.points) {\n      if (this.points[corner].y > lowestPoint.y) {\n        lowestPoint.x = this.points[corner].x;\n        lowestPoint.y = this.points[corner].y;\n      }\n    }\n\n    return lowestPoint\n  }\n\n\n}\n\n\nexport default Spaceship;\n","class Terrain {\n\n  constructor(ctx, canvas) {\n    this.ctx = ctx;\n    this.canvas = canvas;\n    this.width = this.canvas.width;\n    this.height = this.canvas.height + 200;\n\n    this.getTerrain = this.getTerrain.bind(this);\n    this.drawTerrain = this.drawTerrain.bind(this);\n    this.terrain = this.getTerrain(this.width, this.height, (this.height / 4), 0.6);\n    this.terrain2 = this.getTerrain(this.width, this.height, (this.height / 4), 0.6, { s: this.terrain[this.terrain.length - 1], e: 0 });\n    this.offset = 0;\n  }\n\n  // dislpace: change distance a point can go\n\n  // NOTE: without seed: ////////////////////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // getTerrain(width, height, displace, detail) {\n  //   let points = [];\n  //   let power = Math.pow(2, Math.ceil(Math.log(width) / (Math.log(2))))\n  //\n  //   points[0] = height / 1.43 + (Math.random() * displace * 2) - displace;\n  //   points[power] = height / 1.43 + (Math.random() * displace * 2) - displace;\n  //   displace *= detail;\n  //\n  //   for (let i = 1; i < power; i *= 2) {\n  //     for (let j = (power / i) / 2; j < power; j += power / i) {\n  //       points[j] = ((points[j - (power / i) / 2] + points[j + (power / i) / 2]) / 2);\n  //       points[j] += (Math.random() * displace * 2) - displace;\n  //     }\n  //\n  //     displace *= detail;\n  //   }\n  //   // console.log(points);\n  //   // debugger\n  //   return points;\n  // }\n  //\n  // drawTerrain() {\n  //   // debugger\n  //   let terrain = this.getTerrain(this.width, this.height, (this.height / 4), 0.6);\n  //\n  //   this.ctx.beginPath();\n  //   this.ctx.moveTo(0, terrain[0]);\n  //   for (let i = 1; i < terrain.length; i++) {\n  //     this.ctx.lineTo(i, terrain[i]);\n  //   }\n  //   this.ctx.lineTo(this.width, this.height);\n  //   this.ctx.lineTo(0, this.height);\n  //   this.ctx.closePath();\n  //   this.ctx.fillStyle = \"grey\";\n  //   this.ctx.fill();\n  // }\n\n  // drawFloor() {\n  //   this.ctx.beginPath();\n  //   this.ctx.moveTo(0, 500);\n  //   this.ctx.lineTo(this.canvas.width, 500);\n  //   this.ctx.stroke();\n  //   this.ctx.strokeStyle = \"white\";\n  //   this.ctx.closePath();\n  // }\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  // NOTE: with seed:\n\n  getTerrain(width, height, displace, detail, seed) {\n    let points = [];\n    let power = Math.pow(2, Math.ceil(Math.log(width) / (Math.log(2))))\n    // let seed = seed || {\n    //   s: height / 2 + (Math.random() * displace * 2) - displace,\n    //   e: height / 2 + (Math.random() * displace * 2) - displace\n    // };\n    if (!seed) {\n      seed = {\n        s: height / 2 + (Math.random() * displace * 2) - displace,\n        e: height / 2 + (Math.random() * displace * 2) - displace\n      };\n    }\n\n    // set start point:\n    if (seed.s === 0) {\n      seed.s = height / 2 + (Math.random() * displace * 2) - displace;\n    }\n    points[0] = seed.s;\n\n    // set end point:\n    if (seed.e === 0) {\n      seed.e = height / 2 + (Math.random() * displace * 2) - displace\n    }\n    points[power] = seed.e;\n\n    displace *= detail;\n\n    for (let i = 1; i < power; i *= 2) {\n      for (let j = (power / i) / 2; j < power; j += power / i) {\n        points[j] = ((points[j - (power / i) / 2] + points[j + (power / i) / 2]) / 2);\n        points[j] += (Math.random() * displace * 2) - displace;\n      }\n\n      displace *= detail;\n    }\n    // console.log(points);\n    debugger\n    return points;\n  }\n\n  getPointsArr() {\n\n  }\n\n  drawTerrain() {\n    // debugger\n\n    this.ctx.clearRect(0, 0, this.width, this.height);\n    this.offset -= 3;\n\n    // draw first half:\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.offset, this.terrain[0]);\n    for (var t = 0; t < this.terrain.length; t++) {\n      this.ctx.lineTo(t + this.offset, this.terrain[t]);\n    }\n    for (t = 1; t < this.terrain2.length; t++) {\n      this.ctx.lineTo(this.width + this.offset + t, this.terrain2[t])\n    }\n\n    this.ctx.lineTo(this.width + this.offset + t, this.height);\n    this.ctx.lineTo(this.offset, this.height);\n    this.ctx.closePath();\n    this.ctx.fillStyle = \"grey\";\n    this.ctx.fill();\n\n    if (this.terrain2.length - 1 + this.width + this.offset <= this.width) {\n      debugger\n      this.terrain = this.terrain2;\n      this.terrain2 = this.getTerrain(this.width, this.height, (this.height / 4), 0.6, { s: this.terrain[this.terrain.length - 1], e: 0 });\n      this.offset = 0;\n    }\n    // requestAnimationFrame(this.drawTerrain);\n  }\n}\n\nexport default Terrain;\n"],"sourceRoot":""}